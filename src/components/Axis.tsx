import React, { useMemo } from 'react'
import { scaleLinear } from 'd3'
import { genTranslateStr } from '../util'

interface AxisProps {
  /**
   * HTML attributes set on the DOM element for the axis line.
   *
   * Note that this will overwrite all effects performed by other props on this element if a conflict occurs.
   */
  attrsAxisLine?: {}

  /**
   * HTML attributes set on the DOM elements for axis texts.
   *
   * Note that this will overwrite all effects performed by other props on this element if a conflict occurs.
   */
  attrsAxisTexts?: {}

  /**
   * HTML attributes set on the DOM elements for axis ticks.
   *
   * Note that this will overwrite all effects performed by other props on this element if a conflict occurs.
   */
  attrsAxisTicks?: {}

  /**
   * HTML attributes set on the root `g` element.
   *
   * Note that this will overwrite all effects performed by other props on this element if a conflict occurs.
   */
  attrsRoot?: {}

  /**
   * Thickness for the axis line.
   *
   * If the `orientation` prop is `'top'` or `'bottom'`, then this will determine the height of the axis line. If the `orientation` prop is `'right'` or `'left'`, then this will determine the width of the axis line.
   */
  axisLineThickness?: number

  /** HTML `class` attribute set on the root `g` element. */
  className?: string

  /** HTML `id` attribute set on the root `g` element. */
  id?: string

  /**
   * If specified, it sets the offset to the specified value. If not specified, it defaults to 0.
   *
   * https://github.com/d3/d3-axis#axis_offset
   */
  offset?: number

  /**
   * Determines the orientation for the axis.
   *
   * - `'top'`: Construct a new top-oriented axis where ticks are drawn above the horizontal domain path.
   * - `'right'`: Construct a new right-oriented axis where ticks are drawn to the right of the vertical domain path.
   * - `'bottom'`: Construct a new bottom-oriented axis where ticks are drawn below the horizontal domain path.
   * - `'left'`: Construct a new left-oriented axis where ticks are drawn to the left of the vertical domain path.
   */
  orientation?: 'top' | 'right' | 'bottom' | 'left'

  /**
   * Set the scale to be used.
   *
   * https://github.com/d3/d3-scale#readme
   */
  scale: {
    type?: 'linear'
    domain: number[]
    range: number[]
  }

  /** React `style` prop set on the root `g` element. */
  style?: React.CSSProperties

  /** If specified, it sets the tick format function. A `null` format indicates that the scale’s default formatter should be used, which is generated by calling `scale.tickFormat`. */
  tickFormat?: Function

  // TODO: Make this support tickLineThicknessInner & tickLineThicknessOuter
  /**
   * Thickness for the tick lines.
   *
   * If the `orientation` prop is `'top'` or `'bottom'`, then this will determine the width of the tick lines. If the `orientation` prop is `'right'` or `'left'`, then this will determine the width of the tick lines.
   */
  tickLineThickness?: number

  /** If specified, it sets the padding to the specified value. If not specified, it defaults to 3. */
  tickPadding?: number

  /** Sets the arguments that will be passed to `scale.ticks`. */
  ticks?: number

  /** If specified, it sets the inner and outer tick size to the specified value. If size is not specified, it defaults to 6. It will be overwritten by the `tickSizeInner` & `tickSizeOuter` props if a conflict occurs. */
  tickSize?: number

  /** If specified, it sets the inner tick size to the specified value. The inner tick size controls the length of the tick lines, offset from the native position of the axis. It will always overwrite the `tickSize` prop if both are defined. */
  tickSizeInner?: number

  /** If specified, it sets the outer tick size to the specified value. The outer tick size controls the length of the square ends of the domain path, offset from the native position of the axis. Thus, the “outer ticks” are not actually ticks but part of the domain path, and their position is determined by the associated scale’s domain extent. Thus, outer ticks may overlap with the first or last inner tick. An outer tick size of `0` suppresses the square ends of the domain path, instead producing a straight line. It will always overwrite the `tickSize` prop if both are defined. */
  tickSizeOuter?: number
  tickValues?: number[] | string[]

  /** Value to translate the entire axis across the x-coordinate plane. */
  x?: number

  /** Value to translate the entire axis across the y-coordinate plane. */
  y?: number
}

/**
 * A D3 axis drawn with SVG.
 * Based off of [D3's `axis` module](https://github.com/d3/d3-axis).
 */
export const Axis = React.memo(
  React.forwardRef<SVGGElement, AxisProps>(
    (
      {
        attrsAxisLine,
        attrsAxisTexts,
        attrsAxisTicks,
        attrsRoot,
        axisLineThickness = 1,
        className = 'axis',
        id,
        orientation = 'bottom',
        scale,
        style,
        tickFormat,
        tickLineThickness = 1,
        tickPadding = 3,
        ticks,
        tickSize = 6,
        tickSizeInner,
        tickSizeOuter,
        offset = 0,
        x,
        y,
      },
      ref
    ) => {
      let rootTransform = genTranslateStr(x, y)

      const d3Scale = useMemo(
        () => scaleLinear().domain(scale.domain).range(scale.range),
        [scale]
      )
      const d3Ticks = useMemo(() => d3Scale.ticks(ticks), [d3Scale, ticks])

      const outerTickLen = tickSizeOuter ?? tickSize
      let outerTicks
      if (outerTickLen) {
        outerTicks = []
        for (let i = 0; i < 2; i += 1) {
          outerTicks.push(
            <rect
              x={i === 0 ? scale.range[0] : scale.range[1]}
              y={axisLineThickness}
              width={tickLineThickness}
              height={outerTickLen}
              transform={
                i === 1 && tickLineThickness > 0
                  ? `translate(${tickLineThickness * -1},0)`
                  : undefined
              }
              className="axis-tick-outer"
            />
          )
        }
      }

      return (
        <g
          ref={ref}
          id={id}
          className={className}
          style={style}
          transform={rootTransform}
          {...attrsRoot}
        >
          <rect
            x={scale.range[0]}
            y={offset}
            width={scale.range[1] - scale.range[0]}
            height={axisLineThickness}
            className="axis-line"
            {...attrsAxisLine}
          />
          {/* <line x1="0" x2="280" className="axis-line" stroke="black" /> */}
          {d3Ticks.map((dataVal, i) => {
            const tickX = d3Scale(dataVal)
            const innerTickLen = tickSizeInner ?? tickSize

            let tickTransform
            if (i === d3Ticks.length - 1) {
              // If the last tick is at the end of the axis line, move it back the same amount of its thickness because if this doesn't happen,
              // the last tick will be drawn 1px away from the last pixel of the end of the axis line, making a small pixel gap
              tickTransform =
                tickLineThickness > 0 && tickX === scale.range[1]
                  ? `translate(${tickLineThickness * -1},0)`
                  : undefined
            } else if (i !== 0) {
              // If a tick that isn't the first or last tick has a thickness of more than 1, move it back half of its thickness to center the tick
              tickTransform =
                tickLineThickness > 1
                  ? `translate(${(tickLineThickness * -1) / 2},0)`
                  : undefined
            }

            return (
              <React.Fragment key={dataVal}>
                {innerTickLen && (
                  <rect
                    key={dataVal}
                    x={tickX}
                    y={axisLineThickness}
                    width={tickLineThickness}
                    height={innerTickLen}
                    transform={tickTransform}
                    className="axis-tick-inner"
                    {...attrsAxisTicks}
                  />
                )}
                <text
                  x={tickX}
                  y={axisLineThickness + innerTickLen + tickPadding}
                  dominantBaseline="hanging"
                  textAnchor="middle"
                  className="axis-tick-inner-text"
                  {...attrsAxisTexts}
                >
                  {tickFormat ? tickFormat(dataVal) : dataVal}
                </text>
              </React.Fragment>
            )
          })}
          {outerTicks && outerTicks[0]}
          {outerTicks && outerTicks[1]}
        </g>
      )
    }
  )
)
